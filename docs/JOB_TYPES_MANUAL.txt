# JOB TYPES MANUAL
# 크롤러 작업 타입별 매뉴얼

## 1. do (액션 수행)
웹 페이지에서 직접적인 액션을 수행하는 타입

### 1.1 click (클릭)
- **설명**: 요소를 클릭
- **필수 파라미터**: focus
- **선택 파라미터**: speed

### 1.2 text (텍스트 입력)
- **설명**: 텍스트를 입력
- **필수 파라미터**: focus, text
- **선택 파라미터**: speed

### 1.3 clear (텍스트 지우기)
- **설명**: 입력된 텍스트를 지움
- **필수 파라미터**: focus
- **선택 파라미터**: speed

### 1.4 enter (엔터)
- **설명**: 엔터 키 입력
- **필수 파라미터**: 없음

### 1.5 pagedown (페이지 다운)
- **설명**: 페이지 다운 키 입력
- **필수 파라미터**: 없음

### 1.6 radio (라디오/체크박스)
- **설명**: 라디오 버튼이나 체크박스 선택
- **필수 파라미터**: focus, value
- **선택 파라미터**: 없음

### 1.7 scroll (스크롤)
- **설명**: 페이지 스크롤
- **필수 파라미터**: sleep, max_time, speed_variation
- **선택 파라미터**: 없음

### 1.8 scroll_to_element (요소로 스크롤)
- **설명**: 특정 요소로 스크롤
- **필수 파라미터**: focus, sleep, speed, speed_variation, max_time
- **선택 파라미터**: 없음

## 2. find (데이터 찾기)
HTML에서 특정 데이터를 찾아 추출하는 타입

### 2.1 id (ID로 찾기)
- **설명**: ID 속성으로 요소 찾기
- **필수 파라미터**: find_item, find_range
- **선택 파라미터**: 없음

### 2.2 class (클래스로 찾기)
- **설명**: 클래스 속성으로 요소 찾기
- **필수 파라미터**: find_item, find_range
- **선택 파라미터**: 없음

### 2.3 name (태그명으로 찾기)
- **설명**: HTML 태그명으로 요소 찾기
- **필수 파라미터**: find_item, find_range
- **선택 파라미터**: 없음

### 2.4 text (텍스트로 찾기)
- **설명**: 텍스트 내용으로 요소 찾기
- **필수 파라미터**: find_item, find_range
- **선택 파라미터**: 없음

### 2.5 attribute (속성으로 찾기)
- **설명**: 특정 속성으로 요소 찾기
- **필수 파라미터**: find_attribute, find_item, find_range
- **선택 파라미터**: 없음

### 2.6 find_range 옵션들
- **self**: 현재 요소
- **all**: 모든 요소
- **contain**: 포함된 요소
- **first**: 첫 번째 요소
- **last**: 마지막 요소
- **next**: 다음 요소
- **parent**: 부모 요소
- **children**: 자식 요소들
- **siblings**: 형제 요소들

## 3. data (데이터 변환)
Tag 객체를 다양한 형태로 변환하는 타입

### 3.1 to_html (HTML로 변환)
- **설명**: Tag 객체를 HTML 문자열로 변환
- **필수 파라미터**: from, to
- **선택 파라미터**: 없음

### 3.2 to_xpath (XPath로 변환)
- **설명**: Tag 객체를 XPath 문자열로 변환
- **필수 파라미터**: from, to
- **선택 파라미터**: 없음

### 3.3 to_dataframe (DataFrame으로 변환)
- **설명**: Tag 객체를 pandas DataFrame으로 변환
- **필수 파라미터**: from, to
- **선택 파라미터**: 없음

### 3.4 get_href (HREF 추출)
- **설명**: 링크의 href 속성 추출
- **필수 파라미터**: from, to, href_arg
- **선택 파라미터**: 없음

### 3.5 get_hrefs (HREF들 추출)
- **설명**: 여러 링크의 href 속성들을 추출
- **필수 파라미터**: from, to, href_arg
- **선택 파라미터**: 없음

### 3.6 get_text_all (모든 텍스트 추출)
- **설명**: 요소의 모든 텍스트를 하나의 문자열로 추출
- **필수 파라미터**: from, to, text_arg
- **선택 파라미터**: 없음

### 3.7 get_texts_all (텍스트를 리스트로 분리 추출)
- **설명**: 요소의 텍스트를 리스트로 분리하여 추출
- **필수 파라미터**: from, to, text_arg
- **선택 파라미터**: 없음

### 3.8 get_text_all_tagonly (태그만 텍스트 추출)
- **설명**: 태그만 포함된 텍스트 추출
- **필수 파라미터**: from, to, text_arg
- **선택 파라미터**: 없음

### 3.9 get_text_all_without_script (스크립트 제외 텍스트 추출)
- **설명**: script 태그를 제외한 텍스트 추출
- **필수 파라미터**: from, to, text_arg
- **선택 파라미터**: 없음

### 3.10 key_to_list (키들을 리스트로 변환)
- **설명**: 여러 키의 값들을 리스트로 변환
- **필수 파라미터**: to, key_count
- **선택 파라미터**: key_0, key_1, ... (키 개수에 따라)

## 4. request (인터넷 연결)
인터넷 연결을 수행하는 타입

### 4.1 get (GET 요청)
- **설명**: URL로 GET 요청 보내기
- **필수 파라미터**: url
- **선택 파라미터**: 없음

### 4.2 post (POST 요청)
- **설명**: URL로 POST 요청 보내기
- **필수 파라미터**: url, data
- **선택 파라미터**: 없음

### 4.3 selenium (Selenium 요청)
- **설명**: Selenium으로 웹페이지 접속 (engine start 포함)
- **필수 파라미터**: url, wait_time
- **선택 파라미터**: 없음

## 5. save (데이터 저장)
DataFrame을 다양한 형태로 저장하는 타입

### 6.1 excel (Excel 저장)
- **설명**: DataFrame을 Excel 파일로 저장
- **필수 파라미터**: save_type, to, name
- **선택 파라미터**: encoding (무시됨)

### 6.2 csv (CSV 저장)
- **설명**: DataFrame을 CSV 파일로 저장
- **필수 파라미터**: save_type, to, name
- **선택 파라미터**: encoding

### 6.3 txt (TXT 저장)
- **설명**: DataFrame을 TXT 파일로 저장
- **필수 파라미터**: save_type, to, name
- **선택 파라미터**: encoding

### 6.4 mysql (MySQL 저장)
- **설명**: DataFrame을 MySQL 테이블로 저장
- **필수 파라미터**: save_type, to, name
- **선택 파라미터**: encoding (무시됨)

### 6.5 elasticsearch (Elasticsearch 저장)
- **설명**: DataFrame을 Elasticsearch 인덱스로 저장
- **필수 파라미터**: save_type, to, name
- **선택 파라미터**: encoding (무시됨)

## 6. load (데이터 로드)
다양한 형태의 데이터를 DataFrame으로 로드하는 타입

### 6.1 excel (Excel 로드)
- **설명**: Excel 파일을 DataFrame으로 로드
- **필수 파라미터**: load_type, from, name
- **선택 파라미터**: encoding (무시됨)

### 6.2 csv (CSV 로드)
- **설명**: CSV 파일을 DataFrame으로 로드
- **필수 파라미터**: load_type, from, name
- **선택 파라미터**: encoding

### 6.3 txt (TXT 로드)
- **설명**: TXT 파일을 DataFrame으로 로드
- **필수 파라미터**: load_type, from, name
- **선택 파라미터**: encoding

## 7. python (Python 스크립트 실행)
Python 스크립트를 실행하는 타입

### 7.1 file (파일 실행)
- **설명**: 외부 Python 파일을 실행
- **필수 파라미터**: python_type, script_path, to, arg_count
- **선택 파라미터**: from_0, from_1, ... (인자 개수에 따라)

### 7.2 code (코드 직접 실행)
- **설명**: 페이지에서 직접 입력한 Python 코드를 실행
- **필수 파라미터**: python_type, code, to
- **선택 파라미터**: 없음

### 6.4 mysql (MySQL 로드)
- **설명**: MySQL 테이블을 DataFrame으로 로드
- **필수 파라미터**: load_type, from, name
- **선택 파라미터**: encoding (무시됨)

### 6.5 elasticsearch (Elasticsearch 로드)
- **설명**: Elasticsearch 인덱스를 DataFrame으로 로드
- **필수 파라미터**: load_type, from, name
- **선택 파라미터**: encoding (무시됨)

## 7. python (Python 스크립트 실행)
외부 Python 스크립트를 실행하고 결과를 저장하는 타입

### 7.1 기본 Python 스크립트 실행
- **설명**: Python 스크립트를 실행하고 결과를 data_share_dict에 저장
- **필수 파라미터**: script_path, to, arg_count
- **선택 파라미터**: from_0, from_1, ... (인자 개수에 따라)

## 8. wait (대기)
페이지 로딩이나 특정 조건을 기다리는 타입

### 8.1 fixed_time (고정 시간 대기)
- **설명**: 지정된 시간만큼 대기
- **필수 파라미터**: wait_type, time
- **선택 파라미터**: 없음

### 8.2 load_time (로딩 완료 대기)
- **설명**: 페이지 로딩이 완료될 때까지 대기 (구현 예정)
- **필수 파라미터**: wait_type
- **선택 파라미터**: 없음

## 9. test (테스트)
변수를 저장하고 출력하는 테스트 타입

### 10.1 variable (변수 저장 및 출력)
- **설명**: 단일 변수를 저장하고 출력
- **필수 파라미터**: test_type, name, value
- **선택 파라미터**: print_result

### 10.2 list (리스트 생성 및 출력)
- **설명**: 쉼표로 구분된 문자열을 리스트로 변환하여 저장
- **필수 파라미터**: test_type, name, items
- **선택 파라미터**: print_result

### 10.3 dict (딕셔너리 생성 및 출력)
- **설명**: 키:값 형태의 문자열을 딕셔너리로 변환하여 저장
- **필수 파라미터**: test_type, name, key_value_pairs
- **선택 파라미터**: print_result

## 공통 파라미터

### focus 타입들
- **xpath**: XPath로 요소 지정
- **selector**: CSS 선택자로 요소 지정
- **current**: 현재 활성화된 요소

### 인코딩 옵션들
- **utf-8**: UTF-8 인코딩
- **utf-8-sig**: UTF-8 with BOM
- **cp949**: CP949 (한글 Windows)
- **euc-kr**: EUC-KR (한글)
- **latin-1**: Latin-1 인코딩

## 사용 예시

### 1. 버튼 클릭
```json
{
  "name": "로그인 버튼 클릭",
  "type": "do",
  "params": {
    "action": "click",
    "focus": {"xpath": "//button[@id='login']"}
  }
}
```

### 2. 텍스트 입력
```json
{
  "name": "아이디 입력",
  "type": "do",
  "params": {
    "action": "text",
    "focus": {"xpath": "//input[@name='username']"},
    "text": "myuser"
  }
}
```

### 3. 데이터 추출
```json
{
  "name": "제목 추출",
  "type": "find",
  "params": {
    "find_type": "class",
    "find_item": "title",
    "find_range": "first"
  }
}
```

### 4. 데이터 변환
```json
{
  "name": "HTML을 텍스트로 변환",
  "type": "data",
  "params": {
    "convert_type": "get_text_all",
    "from": "extracted_data",
    "to": "cleaned_text",
    "text_arg": "\\n"
  }
}
```

### 4-1. 키들을 리스트로 변환
```json
{
  "name": "여러 데이터를 리스트로 변환",
  "type": "data",
  "params": {
    "convert_type": "key_to_list",
    "to": "combined_list",
    "key_count": 3,
    "key_0": "data1",
    "key_1": "data2",
    "key_2": "data3"
  }
}
```

### 5. 파일 저장
```json
{
  "name": "결과를 Excel로 저장",
  "type": "save",
  "params": {
    "save_type": "excel",
    "to": "result_data",
    "name": "crawl_result.xlsx"
  }
} 